/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/user/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationRuleLister helps list NotificationRules.
// All objects returned here must be treated as read-only.
type NotificationRuleLister interface {
	// List lists all NotificationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRule, err error)
	// NotificationRules returns an object that can list and get NotificationRules.
	NotificationRules(namespace string) NotificationRuleNamespaceLister
	NotificationRuleListerExpansion
}

// notificationRuleLister implements the NotificationRuleLister interface.
type notificationRuleLister struct {
	indexer cache.Indexer
}

// NewNotificationRuleLister returns a new NotificationRuleLister.
func NewNotificationRuleLister(indexer cache.Indexer) NotificationRuleLister {
	return &notificationRuleLister{indexer: indexer}
}

// List lists all NotificationRules in the indexer.
func (s *notificationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRule))
	})
	return ret, err
}

// NotificationRules returns an object that can list and get NotificationRules.
func (s *notificationRuleLister) NotificationRules(namespace string) NotificationRuleNamespaceLister {
	return notificationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationRuleNamespaceLister helps list and get NotificationRules.
// All objects returned here must be treated as read-only.
type NotificationRuleNamespaceLister interface {
	// List lists all NotificationRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRule, err error)
	// Get retrieves the NotificationRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotificationRule, error)
	NotificationRuleNamespaceListerExpansion
}

// notificationRuleNamespaceLister implements the NotificationRuleNamespaceLister
// interface.
type notificationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationRules in the indexer for a given namespace.
func (s notificationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRule))
	})
	return ret, err
}

// Get retrieves the NotificationRule from the indexer for a given namespace and name.
func (s notificationRuleNamespaceLister) Get(name string) (*v1alpha1.NotificationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationrule"), name)
	}
	return obj.(*v1alpha1.NotificationRule), nil
}

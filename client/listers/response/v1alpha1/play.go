/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/response/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlayLister helps list Plays.
// All objects returned here must be treated as read-only.
type PlayLister interface {
	// List lists all Plays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Play, err error)
	// Plays returns an object that can list and get Plays.
	Plays(namespace string) PlayNamespaceLister
	PlayListerExpansion
}

// playLister implements the PlayLister interface.
type playLister struct {
	indexer cache.Indexer
}

// NewPlayLister returns a new PlayLister.
func NewPlayLister(indexer cache.Indexer) PlayLister {
	return &playLister{indexer: indexer}
}

// List lists all Plays in the indexer.
func (s *playLister) List(selector labels.Selector) (ret []*v1alpha1.Play, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Play))
	})
	return ret, err
}

// Plays returns an object that can list and get Plays.
func (s *playLister) Plays(namespace string) PlayNamespaceLister {
	return playNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlayNamespaceLister helps list and get Plays.
// All objects returned here must be treated as read-only.
type PlayNamespaceLister interface {
	// List lists all Plays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Play, err error)
	// Get retrieves the Play from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Play, error)
	PlayNamespaceListerExpansion
}

// playNamespaceLister implements the PlayNamespaceLister
// interface.
type playNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Plays in the indexer for a given namespace.
func (s playNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Play, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Play))
	})
	return ret, err
}

// Get retrieves the Play from the indexer for a given namespace and name.
func (s playNamespaceLister) Get(name string) (*v1alpha1.Play, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("play"), name)
	}
	return obj.(*v1alpha1.Play), nil
}

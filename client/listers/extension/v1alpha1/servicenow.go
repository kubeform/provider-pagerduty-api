/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/extension/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicenowLister helps list Servicenows.
// All objects returned here must be treated as read-only.
type ServicenowLister interface {
	// List lists all Servicenows in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Servicenow, err error)
	// Servicenows returns an object that can list and get Servicenows.
	Servicenows(namespace string) ServicenowNamespaceLister
	ServicenowListerExpansion
}

// servicenowLister implements the ServicenowLister interface.
type servicenowLister struct {
	indexer cache.Indexer
}

// NewServicenowLister returns a new ServicenowLister.
func NewServicenowLister(indexer cache.Indexer) ServicenowLister {
	return &servicenowLister{indexer: indexer}
}

// List lists all Servicenows in the indexer.
func (s *servicenowLister) List(selector labels.Selector) (ret []*v1alpha1.Servicenow, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Servicenow))
	})
	return ret, err
}

// Servicenows returns an object that can list and get Servicenows.
func (s *servicenowLister) Servicenows(namespace string) ServicenowNamespaceLister {
	return servicenowNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicenowNamespaceLister helps list and get Servicenows.
// All objects returned here must be treated as read-only.
type ServicenowNamespaceLister interface {
	// List lists all Servicenows in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Servicenow, err error)
	// Get retrieves the Servicenow from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Servicenow, error)
	ServicenowNamespaceListerExpansion
}

// servicenowNamespaceLister implements the ServicenowNamespaceLister
// interface.
type servicenowNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Servicenows in the indexer for a given namespace.
func (s servicenowNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Servicenow, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Servicenow))
	})
	return ret, err
}

// Get retrieves the Servicenow from the indexer for a given namespace and name.
func (s servicenowNamespaceLister) Get(name string) (*v1alpha1.Servicenow, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicenow"), name)
	}
	return obj.(*v1alpha1.Servicenow), nil
}

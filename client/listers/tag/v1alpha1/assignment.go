/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/tag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssignmentLister helps list Assignments.
// All objects returned here must be treated as read-only.
type AssignmentLister interface {
	// List lists all Assignments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Assignment, err error)
	// Assignments returns an object that can list and get Assignments.
	Assignments(namespace string) AssignmentNamespaceLister
	AssignmentListerExpansion
}

// assignmentLister implements the AssignmentLister interface.
type assignmentLister struct {
	indexer cache.Indexer
}

// NewAssignmentLister returns a new AssignmentLister.
func NewAssignmentLister(indexer cache.Indexer) AssignmentLister {
	return &assignmentLister{indexer: indexer}
}

// List lists all Assignments in the indexer.
func (s *assignmentLister) List(selector labels.Selector) (ret []*v1alpha1.Assignment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Assignment))
	})
	return ret, err
}

// Assignments returns an object that can list and get Assignments.
func (s *assignmentLister) Assignments(namespace string) AssignmentNamespaceLister {
	return assignmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssignmentNamespaceLister helps list and get Assignments.
// All objects returned here must be treated as read-only.
type AssignmentNamespaceLister interface {
	// List lists all Assignments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Assignment, err error)
	// Get retrieves the Assignment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Assignment, error)
	AssignmentNamespaceListerExpansion
}

// assignmentNamespaceLister implements the AssignmentNamespaceLister
// interface.
type assignmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Assignments in the indexer for a given namespace.
func (s assignmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Assignment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Assignment))
	})
	return ret, err
}

// Get retrieves the Assignment from the indexer for a given namespace and name.
func (s assignmentNamespaceLister) Get(name string) (*v1alpha1.Assignment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assignment"), name)
	}
	return obj.(*v1alpha1.Assignment), nil
}

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/business/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceSubscriberLister helps list ServiceSubscribers.
// All objects returned here must be treated as read-only.
type ServiceSubscriberLister interface {
	// List lists all ServiceSubscribers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSubscriber, err error)
	// ServiceSubscribers returns an object that can list and get ServiceSubscribers.
	ServiceSubscribers(namespace string) ServiceSubscriberNamespaceLister
	ServiceSubscriberListerExpansion
}

// serviceSubscriberLister implements the ServiceSubscriberLister interface.
type serviceSubscriberLister struct {
	indexer cache.Indexer
}

// NewServiceSubscriberLister returns a new ServiceSubscriberLister.
func NewServiceSubscriberLister(indexer cache.Indexer) ServiceSubscriberLister {
	return &serviceSubscriberLister{indexer: indexer}
}

// List lists all ServiceSubscribers in the indexer.
func (s *serviceSubscriberLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSubscriber, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSubscriber))
	})
	return ret, err
}

// ServiceSubscribers returns an object that can list and get ServiceSubscribers.
func (s *serviceSubscriberLister) ServiceSubscribers(namespace string) ServiceSubscriberNamespaceLister {
	return serviceSubscriberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceSubscriberNamespaceLister helps list and get ServiceSubscribers.
// All objects returned here must be treated as read-only.
type ServiceSubscriberNamespaceLister interface {
	// List lists all ServiceSubscribers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSubscriber, err error)
	// Get retrieves the ServiceSubscriber from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceSubscriber, error)
	ServiceSubscriberNamespaceListerExpansion
}

// serviceSubscriberNamespaceLister implements the ServiceSubscriberNamespaceLister
// interface.
type serviceSubscriberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceSubscribers in the indexer for a given namespace.
func (s serviceSubscriberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSubscriber, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSubscriber))
	})
	return ret, err
}

// Get retrieves the ServiceSubscriber from the indexer for a given namespace and name.
func (s serviceSubscriberNamespaceLister) Get(name string) (*v1alpha1.ServiceSubscriber, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesubscriber"), name)
	}
	return obj.(*v1alpha1.ServiceSubscriber), nil
}

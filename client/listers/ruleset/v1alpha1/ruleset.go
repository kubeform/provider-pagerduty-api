/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-pagerduty-api/apis/ruleset/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RulesetLister helps list Rulesets.
// All objects returned here must be treated as read-only.
type RulesetLister interface {
	// List lists all Rulesets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ruleset, err error)
	// Rulesets returns an object that can list and get Rulesets.
	Rulesets(namespace string) RulesetNamespaceLister
	RulesetListerExpansion
}

// rulesetLister implements the RulesetLister interface.
type rulesetLister struct {
	indexer cache.Indexer
}

// NewRulesetLister returns a new RulesetLister.
func NewRulesetLister(indexer cache.Indexer) RulesetLister {
	return &rulesetLister{indexer: indexer}
}

// List lists all Rulesets in the indexer.
func (s *rulesetLister) List(selector labels.Selector) (ret []*v1alpha1.Ruleset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ruleset))
	})
	return ret, err
}

// Rulesets returns an object that can list and get Rulesets.
func (s *rulesetLister) Rulesets(namespace string) RulesetNamespaceLister {
	return rulesetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RulesetNamespaceLister helps list and get Rulesets.
// All objects returned here must be treated as read-only.
type RulesetNamespaceLister interface {
	// List lists all Rulesets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ruleset, err error)
	// Get retrieves the Ruleset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ruleset, error)
	RulesetNamespaceListerExpansion
}

// rulesetNamespaceLister implements the RulesetNamespaceLister
// interface.
type rulesetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Rulesets in the indexer for a given namespace.
func (s rulesetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ruleset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ruleset))
	})
	return ret, err
}

// Get retrieves the Ruleset from the indexer for a given namespace and name.
func (s rulesetNamespaceLister) Get(name string) (*v1alpha1.Ruleset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ruleset"), name)
	}
	return obj.(*v1alpha1.Ruleset), nil
}

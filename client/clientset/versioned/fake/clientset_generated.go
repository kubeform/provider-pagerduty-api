/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "kubeform.dev/provider-pagerduty-api/client/clientset/versioned"
	addonv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/addon/v1alpha1"
	fakeaddonv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/addon/v1alpha1/fake"
	businessv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/business/v1alpha1"
	fakebusinessv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/business/v1alpha1/fake"
	escalationv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/escalation/v1alpha1"
	fakeescalationv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/escalation/v1alpha1/fake"
	eventv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/event/v1alpha1"
	fakeeventv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/event/v1alpha1/fake"
	extensionv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/extension/v1alpha1"
	fakeextensionv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/extension/v1alpha1/fake"
	maintenancev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/maintenance/v1alpha1"
	fakemaintenancev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/maintenance/v1alpha1/fake"
	responsev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/response/v1alpha1"
	fakeresponsev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/response/v1alpha1/fake"
	rulesetv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/ruleset/v1alpha1"
	fakerulesetv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/ruleset/v1alpha1/fake"
	schedulev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/schedule/v1alpha1"
	fakeschedulev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/schedule/v1alpha1/fake"
	servicev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/service/v1alpha1"
	fakeservicev1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/service/v1alpha1/fake"
	slackv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/slack/v1alpha1"
	fakeslackv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/slack/v1alpha1/fake"
	tagv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/tag/v1alpha1"
	faketagv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/tag/v1alpha1/fake"
	teamv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/team/v1alpha1"
	faketeamv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/team/v1alpha1/fake"
	userv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/user/v1alpha1"
	fakeuserv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/user/v1alpha1/fake"
	webhookv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/webhook/v1alpha1"
	fakewebhookv1alpha1 "kubeform.dev/provider-pagerduty-api/client/clientset/versioned/typed/webhook/v1alpha1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// AddonV1alpha1 retrieves the AddonV1alpha1Client
func (c *Clientset) AddonV1alpha1() addonv1alpha1.AddonV1alpha1Interface {
	return &fakeaddonv1alpha1.FakeAddonV1alpha1{Fake: &c.Fake}
}

// BusinessV1alpha1 retrieves the BusinessV1alpha1Client
func (c *Clientset) BusinessV1alpha1() businessv1alpha1.BusinessV1alpha1Interface {
	return &fakebusinessv1alpha1.FakeBusinessV1alpha1{Fake: &c.Fake}
}

// EscalationV1alpha1 retrieves the EscalationV1alpha1Client
func (c *Clientset) EscalationV1alpha1() escalationv1alpha1.EscalationV1alpha1Interface {
	return &fakeescalationv1alpha1.FakeEscalationV1alpha1{Fake: &c.Fake}
}

// EventV1alpha1 retrieves the EventV1alpha1Client
func (c *Clientset) EventV1alpha1() eventv1alpha1.EventV1alpha1Interface {
	return &fakeeventv1alpha1.FakeEventV1alpha1{Fake: &c.Fake}
}

// ExtensionV1alpha1 retrieves the ExtensionV1alpha1Client
func (c *Clientset) ExtensionV1alpha1() extensionv1alpha1.ExtensionV1alpha1Interface {
	return &fakeextensionv1alpha1.FakeExtensionV1alpha1{Fake: &c.Fake}
}

// MaintenanceV1alpha1 retrieves the MaintenanceV1alpha1Client
func (c *Clientset) MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface {
	return &fakemaintenancev1alpha1.FakeMaintenanceV1alpha1{Fake: &c.Fake}
}

// ResponseV1alpha1 retrieves the ResponseV1alpha1Client
func (c *Clientset) ResponseV1alpha1() responsev1alpha1.ResponseV1alpha1Interface {
	return &fakeresponsev1alpha1.FakeResponseV1alpha1{Fake: &c.Fake}
}

// RulesetV1alpha1 retrieves the RulesetV1alpha1Client
func (c *Clientset) RulesetV1alpha1() rulesetv1alpha1.RulesetV1alpha1Interface {
	return &fakerulesetv1alpha1.FakeRulesetV1alpha1{Fake: &c.Fake}
}

// ScheduleV1alpha1 retrieves the ScheduleV1alpha1Client
func (c *Clientset) ScheduleV1alpha1() schedulev1alpha1.ScheduleV1alpha1Interface {
	return &fakeschedulev1alpha1.FakeScheduleV1alpha1{Fake: &c.Fake}
}

// ServiceV1alpha1 retrieves the ServiceV1alpha1Client
func (c *Clientset) ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface {
	return &fakeservicev1alpha1.FakeServiceV1alpha1{Fake: &c.Fake}
}

// SlackV1alpha1 retrieves the SlackV1alpha1Client
func (c *Clientset) SlackV1alpha1() slackv1alpha1.SlackV1alpha1Interface {
	return &fakeslackv1alpha1.FakeSlackV1alpha1{Fake: &c.Fake}
}

// TagV1alpha1 retrieves the TagV1alpha1Client
func (c *Clientset) TagV1alpha1() tagv1alpha1.TagV1alpha1Interface {
	return &faketagv1alpha1.FakeTagV1alpha1{Fake: &c.Fake}
}

// TeamV1alpha1 retrieves the TeamV1alpha1Client
func (c *Clientset) TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface {
	return &faketeamv1alpha1.FakeTeamV1alpha1{Fake: &c.Fake}
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return &fakeuserv1alpha1.FakeUserV1alpha1{Fake: &c.Fake}
}

// WebhookV1alpha1 retrieves the WebhookV1alpha1Client
func (c *Clientset) WebhookV1alpha1() webhookv1alpha1.WebhookV1alpha1Interface {
	return &fakewebhookv1alpha1.FakeWebhookV1alpha1{Fake: &c.Fake}
}
